/* eslint-disable */
export default async () => {
    const t = {
        ["./shared/infra/result/error.dto"]: await import("./shared/infra/result/error.dto"),
        ["./shared/infra/result/search.metadata.dto"]: await import("./shared/infra/result/search.metadata.dto"),
        ["./campaign/presentation/REST/dto/response/get-campaign/get-campaign.response.dto"]: await import("./campaign/presentation/REST/dto/response/get-campaign/get-campaign.response.dto"),
        ["./campaign/infra/repository/prisma/dto/search-campaign.dto"]: await import("./campaign/infra/repository/prisma/dto/search-campaign.dto")
    };
    return { "@nestjs/swagger/plugin": { "models": [[import("./shared/infra/result/error.dto"), { "ErrorDto": { code: { required: true, type: () => String }, message: { required: true, type: () => String } } }], [import("./shared/infra/result/result.dto"), { "ResultDto": { isSuccess: { required: true, type: () => Boolean }, isFailure: { required: true, type: () => Boolean }, error: { required: false, type: () => t["./shared/infra/result/error.dto"].ErrorDto } } }], [import("./shared/infra/result/search.metadata.dto"), { "SearchMetadataDTO": { total: { required: false, type: () => Number }, totalPages: { required: false, type: () => Number }, currentPage: { required: false, type: () => Number }, perPage: { required: false, type: () => Number }, search: { required: false, type: () => String }, nextPage: { required: false, type: () => String }, hasPrevPage: { required: false, type: () => Boolean }, hasNextPage: { required: false, type: () => Boolean } } }], [import("./shared/infra/result/search-result.dto"), { "SearchResultDTO": { metadata: { required: true, type: () => t["./shared/infra/result/search.metadata.dto"].SearchMetadataDTO } } }], [import("./campaign/presentation/REST/dto/response/get-campaign/get-campaign.response.dto"), { "GetCampaignResponseDto": { id: { required: true, type: () => String }, name: { required: true, type: () => String }, category: { required: true, type: () => Object }, startDate: { required: true, type: () => Date }, endDate: { required: true, type: () => Date }, status: { required: true, type: () => Object }, createdAt: { required: true, type: () => Date } } }], [import("./campaign/infra/repository/prisma/dto/search-campaign.dto"), { "SearchCampaignDTO": { value: { required: true, type: () => [t["./campaign/presentation/REST/dto/response/get-campaign/get-campaign.response.dto"].GetCampaignResponseDto] } } }], [import("./campaign/application/create-campaign/dto/create-campaign.dto"), { "CreateCampaignDto": { name: { required: true, type: () => String }, category: { required: true, type: () => Object }, startDate: { required: true, type: () => Date }, endDate: { required: true, type: () => Date }, status: { required: false, type: () => Object, default: "active" } } }], [import("./campaign/presentation/REST/dto/request/create-campaign-body.dto"), { "CreateCampaignBodyDto": { name: { required: true, type: () => String }, category: { required: true, type: () => Object }, startDate: { required: true, type: () => Date }, endDate: { required: true, type: () => Date }, status: { required: false, type: () => Object } } }], [import("./campaign/application/update-campaign/dto/update-campaign.dto"), { "UpdateCampaignDto": { id: { required: true, type: () => String } } }], [import("./campaign/presentation/REST/dto/response/get-campaign/get-campaign.result.dto"), { "GetCampaignResponseDtoWithResult": { value: { required: true, type: () => t["./campaign/presentation/REST/dto/response/get-campaign/get-campaign.response.dto"].GetCampaignResponseDto } } }], [import("./campaign/presentation/REST/dto/request/get-campaign/get-campaign-query.dto"), { "GetCampaignQueryDto": { page: { required: false, type: () => Object, default: 1 }, limit: { required: false, type: () => Object, default: 10 }, category: { required: false, type: () => String }, status: { required: false, type: () => Object, default: "active" }, includeDeleted: { required: false, type: () => Object, default: false }, order: { required: false, type: () => Object, default: "asc" }, orderBy: { required: false, type: () => Object, default: "createdAt", maxLength: 30 }, search: { required: false, type: () => String, maxLength: 255 } } }], [import("./campaign/presentation/REST/dto/response/get-campaign/get-all-campaign.result.dto"), { "GetAllCampaignResultDTO": { value: { required: true, type: () => [t["./campaign/presentation/REST/dto/response/get-campaign/get-campaign.response.dto"].GetCampaignResponseDto] } } }]], "controllers": [[import("./campaign/presentation/REST/campaign.controller"), { "CampaignController": { "createCampaign": {}, "getCampaign": {}, "deleteCampaign": {}, "updateCampaign": {}, "getAllCampaigns": { summary: "Only Search methods don't go over usecases. The idea behind this is to have a separate flow for search avoiding extra complixity for database or orm related matters.", type: t["./campaign/infra/repository/prisma/dto/search-campaign.dto"].SearchCampaignDTO } } }]] } };
};